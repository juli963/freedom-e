
#include "Console_Defines.h"
#include "Sniffer_8b10b_40.h"

int main(int argc, char **argv) {

    Sniffer_8b10b_40_TB *tb = new Sniffer_8b10b_40_TB();

    tb->opentrace("trace.vcd");
    tb->init();

    Sniffer_8b10b_40_TB::s8b10b temp[2];
    temp[0].data = 0xBC;
    temp[0].isk = 1;
    temp[1].data = 0xFB;
    temp[1].isk = 1;

    tb->enable_trigger_code(temp[0], temp[1], Sniffer_8b10b_40_TB::estart_stop, 0);
    tb->sel_gtp(0);
    
    uint8_t data[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xBC, 0x02,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xBC, 0x02,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0xBC, 0x02,
        0x11, 0x12, 0x02, 0x03, 0x04, 0x05, 0xBC, 0x02,
        0x00, 0x01, 0x02, 0xFB, 0xBC, 0x05, 0x07, 0x02,
        0x00, 0x01, 0x02, 0xFA, 0xBC, 0x05, 0x07, 0x02,
        0x00, 0x01, 0x02, 0xFE, 0xBC, 0x05, 0x07, 0x02,
        0x00, 0x01, 0x02, 0xFB, 0xBC, 0x05, 0x07, 0x02,
        0x00, 0x01, 0x02, 0xFB, 0xBC, 0x05, 0x07, 0x02
    };
    uint8_t isk[]= {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    };

    tb->enq_rx_fifo(data, isk, sizeof(data));
    for(uint8_t i = 0; i < 128; i++){
        tb->tick();
    }

    for(uint16_t i = 0; i < 128; i++){
        tb->deq_rx_fifo();
        tb->tick();
    }

/*
    for(uint16_t i = 0; i < 5000; i++){
        tb->tick();
    }
*/
    tb->deq_hw_fifo(1, 0);
    for(uint16_t i = 0; i < 5000; i++){
        tb->tick();
    }

}

/**
 *     val io = IO(new Bundle{
        val data_in = Vec(Channels, Flipped(ValidIO(new B_8b10b(4))))

        val regs = new Bundle{
            val enable = Input(Bool())
            val gtp_sel = Input(UInt(2.W))
            val rate = Input(UInt(3.W))
            val scrambler_en = Input(Bool())
            val trigger_mode = Input(Vec(num_triggers, UInt(2.W)))

            val trigger_start = Vec(num_triggers, Flipped(new B_8b10b(1)))
            val trigger_stop = Vec(num_triggers, Flipped(new B_8b10b(1)))
        }

        val data_deq = Vec(num_triggers, DecoupledIO(new RAW_8b10b))  // Entry per Trigger
        val mgmt_deq = Vec(num_triggers, DecoupledIO(new MGMT_8b10b))
        val mem_clock = Input(Clock())
 * 
 */